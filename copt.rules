#
#	jmp & bra
#

	jmp %1
%1:
=
%1:


	jmp %1
%2:
%1:
=
%2:
%1:


	jmp %1
%3:
%2:
%1:
=
%3:
%2:
%1:


	jmp %1
	jmp %2
=
	jmp %1

#
#	case
#

	jeq %1
	jmp %2
%1:
=
	jne %2
%1:


	jne %1
	jmp %2
%1:
=
	jeq %2
%1:


#
#
#

	bra %1
%1:
=
%1:


	bra %2
%1:
%2:
=
%1:
%2:


	bra %1
	bra %2
=
	bra %1

#
#
#

	ldx #%1
	ldx 0,x
=
	ldx %1

#
#
#

	clra
	clra
=
	clra


	ldab %1
	tstb
=
	ldab %1


	stab %1
	tstb
=
	stab %1


	jsr __load8u
	tstb
=
	jsr __load8u


	stab %1
	clra
	tstb
=
	clra
	stab %1


	incb
	clra
	tstb
=
	clra
	incb


	clra
	aba
	adca #0
=
	tstb


	addb #<%1
	adca #>%1
	addb #<%2
	adca #>%2
=
	addb #<%1+%2
	adca #>%1+%2


	ldab #<%1
	ldaa #>%1
	addb #<%2
	adca #>%2
=
	ldab #<%1+%2
	ldaa #>%1+%2


	ldab #<%1
	ldaa #>%1
	jsr __load16
=
	ldab %1+1
	ldaa %1


	ldab #<%1
	ldaa #>%1
	stab @tmp1+1
	staa @tmp1
	ldx @tmp1
=
	ldx #%1

# long

	jsr __u16to32
	ldab @long+3
	pshb
	ldab @long+2
	pshb
	ldab @long+1
	pshb
	ldab @long
	pshb
=
	pshb
	psha
	clrb
	pshb
	pshb


	ldab %4,x
	stab @long+3
	ldab %3,x
	stab @long+2
	ldab %2,x
	stab @long+1
	ldab %1,x
	stab @long
	ldab @long+3
	pshb
	ldab @long+2
	pshb
	ldab @long+1
	pshb
	ldab @long
	pshb
=
	ldab %4,x
	pshb
	ldab %3,x
	pshb
	ldab %2,x
	pshb
	ldab %1,x
	pshb


	ldx #%1
	stx @long+2
	ldx #%2
	stx @long
	ldx #%3
	ldab @long+3
	stab 3,x
	ldab @long+2
	stab 2,x
	ldab @long+1
	stab 1,x
	ldab @long
	stab 0,x
=
	ldx #%3
	ldab #<%1
	ldaa #>%1
	stab 3,x
	staa 2,x
	ldab #<%2
	ldaa #>%2
	stab 1,x
	staa 0,x

	ldab @bp+1
	ldaa @bp
	pshb
	psha
	ldab %4,x
	ldaa %3,x
	aslb
	rola
	tsx
	addb 1,x
	adca 0,x
	ins
	ins
=
	ldab %4,x
	ldaa %3,x
	aslb
	rola
	addb @bp+1
	adca @bp

	stab %2,x
	staa %1,x
	ldab %2,x
	ldaa %1,x
=
	stab %2,x
	staa %1,x

	ldab %2,x
	ldaa %1,x
	jsr __tfr_dx
=
	ldx %1,x

	stab %2,x
	staa %1,x
	jsr __tfr_dx
=
	stab %2,x
	staa %1,x
	ldx %1,x


	jsr __load8u
	tstb
=
	jsr __load8u

#
#	-Os fusion
#
	jsr __load32x
	jsr __push32
=
	jsr __load32x_push

	jsr __load32bx
	jsr __push32
=
	jsr __load32bx_push


	ldab #<%1
	ldaa #>%1
	jsr __load16
=
	ldab %1+1
	ldaa %1


	jsr __load32x
	jsr __addf32tos
=
	jsr __load32x_addf


	jsr __load32x
	jsr __subf32tos
=
	jsr __load32x_subf


	jsr __load32x
	jsr __mulf32tos
=
	jsr __load32x_mulf


	jsr __load32x
	jsr __divf32tos
=
	jsr __load32x_divf


	jsr __load32x
	jsr __cmpf32tos
=
	jsr __load32x_cmpf

#
#	branch condition
#

	clra
	andb %1
	aba
	adca #0
=
	andb %1


	jsr __ge16s
	aba
	adca #0
	jeq %1
=
	jsr __ge16s
	jeq %1


	jsr __lt16s	// XXX
	aba
	adca #0
	jeq %1
=
	jsr __lt16s
	jeq %1


	jsr __eq16
	aba
	adca #0
	jne %1
=
	jsr __eq16
	jne %1

	jsr __eq16
	aba
	adca #0
	jeq %1
=
	jsr __eq16
	jeq %1


	jsr __ne16
	aba
	adca #0
	jeq %1
=
	jsr __ne16
	jeq %1


	clrb
	clra
	jmp %1
	clrb
	clra
%1:
=
	clrb
	clra
%1:

	stab %2,x
	staa %1,x
	subb #<1
	sbca #>1
	jsr __load8u
=
	stab %2,x
	staa %1,x
	ldx %1,x
	dex
	ldab 0,x

	stab %2,x
	staa %1,x
	addb #<1
	adca #>1
	jsr __load8u
=
	stab %2,x
	staa %1,x
	ldx %1,x
	inx
	ldab 0,x

	stab %2,x
	staa %1,x
	jsr __load16
= 
	stab %2,x
	staa %1,x
	ldx %1,x


	clra
	ldab %1,x
	clra
=
	ldab %1,x
	clra

	ins
	ins
	ins
	ins
	ins
	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins8_popx_stxbp

	ins
	ins
	ins
	ins
	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins7_popx_stxbp

	ins
	ins
	ins
	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins6_popx_stxbp

	ins
	ins
	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins5_popx_stxbp

	ins
	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins4_popx_stxbp

	ins
	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins3_popx_stxbp

	ins
	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins2_popx_stxbp

	ins
	jsr __popx
	stx @bp
	rts
=
	jmp __ins1_popx_stxbp

	jsr __popx
	stx @bp
	rts
=
	jmp __popx_stxbp

	andb %1
	tstb
=
	andb %1

	incb
	tstb
=
	incb

